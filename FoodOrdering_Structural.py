# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17gqgmjBh27U0bqQ414faUn_Mm0-Zqg5H
"""

#All the required libraries
!pip install haversine
import pandas as pd
import numpy as np
import haversine as hs
import datetime

#importing the sqlite3 library and creating a new database
import sqlite3
conn = sqlite3.connect('FoodOrdering.db')
c = conn.cursor()

#tables creation
c.execute('''CREATE TABLE User (UserId INTEGER PRIMARY KEY, Name TEXT NOT NULL, Email TEXT, Password TEXT NOT NULL, ContactNo NUMERIC, UserAddress TEXT)''')
c.execute('''CREATE TABLE Resturant (RestID INTEGER PRIMARY KEY, ResturantName TEXT NOT NULL, RestAddress TEXT, latitude NUMBER, longitude NUMBER)''')
c.execute('''CREATE TABLE Menu (MenuId INTEGER PRIMARY KEY, RestId INTEGER, ResturantName text, FoodName text, Price INTEGER, FOREIGN KEY (RestId) REFERENCES Resturant (RestId) )''')
c.execute('''CREATE TABLE Cart (UserId INTEGER, ResturantName TEXT, DishName TEXT, Quantity INTEGER, Price INTEGER)''')
c.execute('''CREATE TABLE Wishlist (UserId INTEGER, ResturantName TEXT, DishName TEXT, Price INTEGER)''')

#Resturant Table
c.execute('''INSERT INTO Resturant (RestID, ResturantName, RestAddress, latitude, longitude) VALUES (2020142,'Barbeque Nation','Sector 62, Noida',22.3, 78.7)''')
c.execute('''INSERT INTO Resturant (RestID, ResturantName, RestAddress, latitude, longitude) VALUES (2020187,'Spicy Route','Imperial Hotel, Janpath, Delhi',22.1, 78.4)''')
c.execute('''INSERT INTO Resturant (RestID, ResturantName, RestAddress, latitude, longitude) VALUES (2020764,'Motil Mahal Delux','Greater Kailash 1, Delhi',22.2, 78.3)''')
c.execute('''INSERT INTO Resturant (RestID, ResturantName, RestAddress, latitude, longitude) VALUES (2020555,'Travertino',' Zakir Hussain Marg, Delhi',22.3, 78.2)''')
c.execute('''INSERT INTO Resturant (RestID, ResturantName, RestAddress, latitude, longitude) VALUES (2020491,'The Yum Yum Tree','Community Centre, New Friends Colony, Delhi',22.4, 78.8)''')

#Menu Table
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020142001,2020142,'Barbeque Nation','Paneer Chilly', 250)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020142002,2020142,'Barbeque Nation','Shahi Paneer', 350)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020142003,2020142,'Barbeque Nation','Butter Naan', 80)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020142004,2020142,'Barbeque Nation','Penne Alferado', 300)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020142005,2020142,'Barbeque Nation','Kitkat Shake', 200)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020187001,2020187,'Spicy Route','Chilly Garlic Noodles', 250)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020187002,2020187,'Spicy Route','Paneer Manchurian', 250)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020187003,2020187,'Spicy Route','Spicy Chicken Burger', 200)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020187004,2020187,'Spicy Route','Mango Shake', 150)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020187005,2020187,'Spicy Route','Gravy fried Momos', 120)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020491001,2020491,'The Yum Yum Tree','Chicken Masala', 549)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020491002,2020491,'The Yum Yum Tree','Chicken Roll', 149)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020491003,2020491,'The Yum Yum Tree','Rara Chicken', 549)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020491004,2020491,'The Yum Yum Tree','Tandoori Roti', 60)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020491005,2020491,'The Yum Yum Tree','Butter Naan', 80)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020555001,2020555,'Travertino','Paneer Butter Masala', 349)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020555002,2020555,'Travertino','Paneer Pasanda', 349)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020555003,2020555,'Travertino','Mashroom Masala', 300)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020555004,2020555,'Travertino','Dum Aloo', 250)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020555005,2020555,'Travertino','Butter Naan', 70)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020764001,2020764,'Motil Mahal Delux','Stuffed Paratha', 120)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020764002,2020764,'Motil Mahal Delux','Chole Bhatoore', 180)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020764003,2020764,'Motil Mahal Delux','Chole Kulche', 180)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020764004,2020764,'Motil Mahal Delux','Lassi', 100)''')
c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020764005,2020764,'Motil Mahal Delux','Raj-Khachodi', 80)''')
conn.commit()

#Authentication of the user of the finding
def authentication(argument):

    #signup module for the new user
    def signup():
      conn = sqlite3.connect('FoodOrdering.db')
      c= conn.cursor()
      name = input("Dear Customer, Please Tell Us Your name : ")
      email= input("Please enter the email address : ")
      password= input("Create your password : ")
      contactNo= input("Please enter your Contact Number : ")
      userAddress= input("Please enter the residential Address : ")

      conn = sqlite3.connect('FoodOrdering.db')
      c= conn.cursor()
      c.execute('''INSERT INTO User (Name, Email, Password, ContactNo, UserAddress) VALUES (?,?,?,?,?)''',(name,email,password,contactNo,userAddress))
      conn.commit()
    
    #Login module for existing user
    def login():
      print("Welcome, You need to Login now")
      contactNo=input("Enter your Phone number")
      password=input("Enter your Password")

      c = conn.cursor()
      c.execute('SELECT * from User WHERE contactNo="%s" AND Password="%s"' % (contactNo,password))
      if c.fetchone() is not None:
          print ("Welcome")
      else:
          print ("Login failed")

    if(argument==1):
        signup()
        login()
    elif argument==2:
        login()  
    else:
        print('Error')

#module for Placing the new order
def order():

  #for viewing the menu
  def view():
    c=conn.cursor()
    c.execute('SELECT * from Menu')
    dishes = c.fetchall()
    foods=pd.DataFrame(dishes,columns=['MenuId', 'RestId', 'ResturantName', 'FoodName', 'Price'])
    print(foods)
    DIS=estimatedTime()
    print('Estimated time of delivery to your doorstep from different resturants')
    print(DIS)


  #module for adding items viewing the
  def wishlist():
    print('Enter 0 when you want to stop adding items to wishlist')
    bill=0
    var=1
    while var==1:
      menuid=int(input("Enter the menuID: "))
      if menuid !=0:
        c.execute('SELECT * from Menu WHERE MenuId=%d' %menuid)
        SelectedOrder= c.fetchone()
        ResturantName= SelectedOrder[2]
        DishName= SelectedOrder[3]
        Price=SelectedOrder[4]
        c.execute('INSERT INTO Wishlist (ResturantName, DishName, Price) VALUES (?,?,?)',(ResturantName, DishName,Price))
      else:
        var=2
    return bill


  #module for cart
  def cart():

      #viewing cart data
      def viewCart():
        DisplayCart = pd.DataFrame(columns=['Resturant Name','Dish Name','Quantity','Price'])
        c.execute('SELECT * FROM Cart')
        CartedItems= c.fetchall()
        for row in CartedItems:
          ResturantName= row[1]
          DishName= row[2]
          Quantity= row[3]
          Price= row[4]
          new_row = {'Resturant Name': ResturantName,'Dish Name': DishName,'Quantity': Quantity,'Price':Price}
          DisplayCart= DisplayCart.append(new_row, ignore_index=True)
        print(DisplayCart)


      #addding items to the cart
      def addToCart(restID):
        c.execute('SELECT * FROM Menu WHERE RestId = %d' %restID)
        SelectedResturant= c.fetchall()
        DisplayMenu = pd.DataFrame(columns=['MenuId','ResturentName','FoodName','Price'])
        for row in SelectedResturant:
          MenuID= row[0]
          ResturantName=row[2]
          DishName= row[3]
          Price= row[4]
          new_row = {'MenuId':MenuID,'ResturentName':ResturantName,'FoodName':DishName,'Price':Price}
          DisplayMenu= DisplayMenu.append(new_row, ignore_index=True)
        print(DisplayMenu)
        print("enter 0 when you finish selecting items")
        var=1
        while var==1:
          menuid=int(input("Enter the menuID: "))
          if menuid !=0:
            quantity= int(input("Enter the number of plates"))
            c.execute('SELECT * from Menu WHERE MenuId=%d' %menuid)
            SelectedOrder= c.fetchone()
            ResturantName= SelectedOrder[2]
            DishName= SelectedOrder[3]
            Price=SelectedOrder[4]
            c.execute('INSERT INTO Cart (ResturantName, DishName, Quantity, Price) VALUES (?,?,?,?)',(ResturantName, DishName, quantity, Price))
          else:
            var=2
        viewCart()


      #deleting the items from the cart
      def deleteFromCart():
        c= conn.cursor()
        c.execute('SELECT * from Cart')
        all = c.fetchall()
        print("Do you want to delete any item?")
        print("press 1 if Yes")
        print('press 2 if No')
        i=int(input('Enter value: '))
        if (i==1):
          var=1
          while(var==1):
            DisplayCart = pd.DataFrame(columns=['DISH_ID','Dish Name','Quantity','Price'])
            CartedItems= all
            for row in CartedItems:
              DISH_ID= row[0]
              DishName= row[2]
              Quantity= row[3]
              Price= row[4]
              new_row = {'DISH_ID': DISH_ID,'Dish Name': DishName,'Quantity': Quantity,'Price':Price}
              DisplayCart= DisplayCart.append(new_row, ignore_index=True)
            print(DisplayCart)
            print('Enter the DISH_ID from the table shown for deleting the particular item.')
            X=int(input('Enter DISH_ID: '))
            c= conn.cursor()
            c.execute('DELETE from Cart WHERE UserId=%d' %X)
            conn.commit()
            print('The dish has been deleted.')
            print()
            print('Do You wish to delete any more item?')
            print('press 1 for yes')
            print('press 2 for No')
            p=int(input('Enter no: '))
            if(p==2):
              var=2


      #discarding the data from the cart
      def discard():
          c=conn.cursor()
          c.execute('SELECT * from Cart')
          all = c.fetchall()
          print("Do you want to Discard?")
          print("press 1 if Yes")
          print('press 2 if No')
          i=int(input('Enter value: '))
          if (i==1):
              c.execute('DELETE from Cart ')
              conn.commit()
          print('All the items has been deleted from the cart')


      #confirming the order
      def confirm():
         print("Your order is placed, Proceed for payment")

      restID=int(input("You can choose one resturant ID to order"))
      c.execute('SELECT * FROM Menu WHERE RestId = %d' %restID)
      SelectedResturant= c.fetchall()
      DisplayMenu = pd.DataFrame(columns=['MenuId','ResturentName','FoodName','Price'])
      for row in SelectedResturant:
        MenuID= row[0]
        ResturantName=row[2]
        DishName= row[3]
        Price= row[4]
        new_row = {'MenuId':MenuID,'ResturentName':ResturantName,'FoodName':DishName,'Price':Price}
        DisplayMenu= DisplayMenu.append(new_row, ignore_index=True)
      print(DisplayMenu)
      print("enter 0 when you finish selecting items")
      var=1
      while var==1:
        menuid=int(input("Enter the menuID: "))
        if menuid !=0:
          quantity= int(input("Enter the number of plates"))
          c.execute('SELECT * from Menu WHERE MenuId=%d' %menuid)
          SelectedOrder= c.fetchone()
          ResturantName= SelectedOrder[2]
          DishName= SelectedOrder[3]
          Price=SelectedOrder[4]
          c.execute('INSERT INTO Cart (ResturantName, DishName, Quantity, Price) VALUES (?,?,?,?)',(ResturantName, DishName, quantity, Price))
        else:
          var=2
      viewCart()
      var=1
      while var==1:
        print('Press 1 to add items in cart')
        print('Press 2 to delete items from cart')
        print('Press 3 to discard the cart')
        print('Press 4 to confirm')
        choice= int(input("Enter the choice"))
        if choice==1:
          addToCart(restID)
        elif choice==2:
          deleteFromCart()
        elif choice==3:
          discard()
          exit()
        elif choice==4:
          confirm()
          var=2
        else:
          print('Invalid Choice')
      bill= payment(restID)
      


  view()
  print("1| You just want to explore?")
  print("2| You want to order Something?")
  argument=int(input("Choose 1 or 2"))
  if(argument==1):
    bill=wishlist()
  else:
    bill=cart()
  return bill

#estimate the time for the order tracking
def estimatedTime():
  DisplayTime = pd.DataFrame(columns=['resturantName','EstimatedTime(Mins)'])
  Userloc=(22.4,78.4)
  c.execute('SELECT * FROM Resturant')
  resturants= c.fetchall()
  for row in resturants:
    restName= row[1]
    restLat= row[3]
    restLong=row[4]
    loc2=(restLat,restLong)
    distance= hs.haversine(Userloc,loc2)
    estimateTime= distance*1.5
    new_row = {'resturantName': restName, 'EstimatedTime(Mins)':estimateTime}
    DisplayTime= DisplayTime.append(new_row, ignore_index=True)
  return DisplayTime

#module for payment
def payment(restID):

  #calculaing the amount of the bill
  def Calculate(restID):

    #without any coupon the bill amount calc
    def normal_sum(P):
       sum = 0
       for row in P:
          sum= sum+ (row[3]*row[4]) 
       return sum

    #min order of the bill
    def min_order(sum):
      if sum < 200:
        return False
      else:
        return True
        
  #adding delivery charges
    def delivery_charges(restID):
        Userloc=(22.4,78.4)
        c.execute('SELECT * FROM Resturant WHERE RestId = %d' %restID)
        resturant= c.fetchone()
        restLat= resturant[3]
        restLong= resturant[4]
        loc2=(restLat,restLong)
        distance= hs.haversine(Userloc,loc2)
        delivery= 20+ distance*2
        return delivery

    #adding coupon to your bill 
    def coupons(sum):
      print('Do you want to add any coupon?')
      print('press 1 for Yes')
      print('press 2 for No')
      i= int(input('Enter no:'))
      
      if i==1:
          print('which offer do you want to add on this order?')
          print('press 1 for SAVE50')
          print('press 2 for SAVE20')
          print('press 3 for no coupon')
          p=int(input('Enter the input: '))
          if (p==1):
              sum = sum*0.5
          elif p==2:
              sum = sum*0.2
      else:
         sum=0
      return sum

    c.execute('SELECT * FROM Cart')
    P= c.fetchall()
    sum= normal_sum(P) 
    if min_order(sum):
      delivery= delivery_charges(restID)
      discount= coupons(sum)
      Total= sum - discount + delivery
      print('Your sum amounts to', Total)
    else:
      print("Your order sums less than minimum amount i.e 200.")
      c.execute('DELETE * FROM Cart')
    return sum


  #method chosen for paying the bill
  def payment_method():

    #for debit/credit card payment method
    def debit(): 
      card=int(input('Enter your card number: ')) 
      name=input('Enter the name on the card')
      expiry= input('Enter the expiry date:') 
      cvv= int(input('Enter the cvv')) 
      print('Enter 1 for submit') 
      print('Enter 2 for cancel')
      print('Enter 3 for starting payment again')
      Inp=int(input('Enter the digit')) 
      Submit(Inp)
  
    #for upi payment method
    def upi():
      ID=input('Enter the Upi ID')
      OTP=input('Enter OTP from your registered contact number')
      print('Enter 1 for submit')
      print('Enter 2 for cancel')
      print('Enter 3 for starting payment again')
      Inp=int(input('Enter the digit'))
      Submit(Inp)

    #for netbanking as a payment method
    def net_banking():
      Acc_number=int(input('Enter the acc number:'))
      Net_banking=int(input('Enter the net banking Id'))
      otp=input('Enter the OTP from your registered contact number')
      print('Enter 1 for submit')
      print('Enter 2 for cancel')
      print('Enter 3 for starting payment again')
      Inp=int(input('Enter the digit'))
      Submit(Inp)

    #for submit the payment
    def Submit(x):
      if(x==1):
          print('You have placed the order by submitting the required amount ')
      elif(x==2):
          print("You have cancelled the order")
      elif(x==3):
          payment_method()
      else:
          print('wrong entry')
          exit()

    print('Choose 1 for Debit/Credit card method')
    print('Choose 2 for UPI method')
    print('Choose 3 for Net banking method')
    x=int(input('Enter the digit for choosing the convenient method of payment'))
    if(x==1):
          debit()
    elif(x==2):
          upi()
    elif(x==3):
          net_banking()
    else:
          print('wrong entry')
          exit()    

  bill=Calculate(restID)
  payment_method()
  return bill

#estimation of the time to deliver
def timings():
    c.execute('Select * from Cart')
    p=c.fetchone()
    restName= p[1]
    print(restName)
    now = datetime.datetime.now()
    print(now)
    p=now.strftime("%H:%M:%S")
    DIS=estimatedTime()
    for i in range(0,5):
      if(DIS.iloc[i,0]==restName):
        break;
    D=DIS.iloc[i,1]
    M=(int(p[3:5])+int(D))%60
    H=int(p[0:2])+int((int(p[3:5])+int(D))/60)
    Mnew= (int(p[3:5])+int(D*1.1))%60
    Hnew= int(p[0:2])+int((int(p[3:5])+int(D*1.1))/60)
    return Hnew,Mnew

#module for tracking the order
def track(Hnew,Mnew):

  #rate us 
  def rateUs():
    print('Do you want to rate us')
    print('press 1 for yes ')
    print('press 2 for no')
    i=int(input('Enter no:'))
    if(i==1):
            print('rate us by pressing any digit from 0 to 5')
            x=int(input('Give rating: '))
    print('Thanks for you precious time.')
    print('We will meet soon')


  print('Estimated time in HH:MM is ',end=' ')
  print(Hnew,':',Mnew)
  now = datetime.datetime.now()
  p=now.strftime("%H:%M:%S")
  M=(int(p[3:5]))%60
  H=int(p[0:2])
  if (Hnew<H and Mnew<M):
    print('Sorry we are not able to deliver in time. Do you want to cancel?')
    print('1|Yes')
    print('2|No')
    l=int(input('Enter choice:'))
    if l==1:
      print('Order cancelled')
      exit()
    elif l==2:
      print('tahnks for patience. will reach you soon')
  else:
    print('Is your order delivered?')
    print('1: Delivered')
    print('2: not delivered')
    print('3: Call Customer Support')
    choice=int(input('Enter your choice'))
    if choice== 2:
        print('There is still time in delivery, please wait')
        print('Do u want to track again?')
        print('1:yes')
        print('2:no')
        i=int(input('enter value:'))
        if(i==1):
          track(Hnew,Mnew)
    elif choice==1:
        rateUs()
    elif choice==3:
        print('For customer Support Call on 8750331566')
    else:
        print('Wrong Choice dear')

#main call
def main():
    print("1| New User")
    print("2| Existing User")
    argument= int(input("Are you a new user or existing user, choose 1 or 2?"))
    authentication(argument)
    bill=order()
    if bill==0:
      print("Thank You, Visit Again")
    else:
      Hnew, Mnew= timings()
      track(Hnew, Mnew)
    

if __name__ == "__main__":
    main()