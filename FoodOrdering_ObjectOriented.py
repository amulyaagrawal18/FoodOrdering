# -*- coding: utf-8 -*-
"""MT20004_MT20019_OOPD_Project2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16DE3BJM3B-LxpkxkrbO_2j5Xl7-US1KP
"""

#All the required libraries
!pip install haversine
import pandas as pd
import numpy as np
import haversine as hs
import datetime
import sqlite3

class createDataBase():
  def __init__ (self):
    self.c = 0

  #creation of database
  def database(self):
    conn = sqlite3.connect('FoodOrdering.db')
    self.c = conn.cursor()

  #creation of tables
  def createTable(self):
    self.c.execute('''CREATE TABLE User (UserId INTEGER PRIMARY KEY, Name TEXT NOT NULL, Email TEXT, Password TEXT NOT NULL, ContactNo NUMERIC, UserAddress TEXT)''')
    self.c.execute('''CREATE TABLE Resturant (RestID INTEGER PRIMARY KEY, ResturantName TEXT NOT NULL, RestAddress TEXT, latitude NUMBER, longitude NUMBER)''')
    self.c.execute('''CREATE TABLE Menu (MenuId INTEGER PRIMARY KEY, RestId INTEGER, ResturantName text, FoodName text, Price INTEGER, FOREIGN KEY (RestId) REFERENCES Resturant (RestId) )''')
    self.c.execute('''CREATE TABLE Cart (UserId INTEGER, ResturantName TEXT, DishName TEXT, Quantity INTEGER, Price INTEGER)''')
    self.c.execute('''CREATE TABLE Wishlist (UserId INTEGER, ResturantName TEXT, DishName TEXT, Price INTEGER)''')

class CreateMenu():
    def __init__ (self):
          self.conn = sqlite3.connect('FoodOrdering.db')
          self.c = self.conn.cursor()
    
    #creation of resturant
    def createResturant(self):
          self.c.execute('''INSERT INTO Resturant (RestID, ResturantName, RestAddress, latitude, longitude) VALUES (2020142,'Barbeque Nation','Sector 62, Noida',22.3, 78.7)''')
          self.c.execute('''INSERT INTO Resturant (RestID, ResturantName, RestAddress, latitude, longitude) VALUES (2020187,'Spicy Route','Imperial Hotel, Janpath, Delhi',22.1, 78.4)''')
          self.c.execute('''INSERT INTO Resturant (RestID, ResturantName, RestAddress, latitude, longitude) VALUES (2020764,'Motil Mahal Delux','Greater Kailash 1, Delhi',22.2, 78.3)''')
          self.c.execute('''INSERT INTO Resturant (RestID, ResturantName, RestAddress, latitude, longitude) VALUES (2020555,'Travertino',' Zakir Hussain Marg, Delhi',22.3, 78.2)''')
          self.c.execute('''INSERT INTO Resturant (RestID, ResturantName, RestAddress, latitude, longitude) VALUES (2020491,'The Yum Yum Tree','Community Centre, New Friends Colony, Delhi',22.4, 78.8)''')

    #creating Dishes and prices- Menu format
    def createDishes(self):
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020142001,2020142,'Barbeque Nation','Paneer Chilly', 250)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020142002,2020142,'Barbeque Nation','Shahi Paneer', 350)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020142003,2020142,'Barbeque Nation','Butter Naan', 80)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020142004,2020142,'Barbeque Nation','Penne Alferado', 300)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020142005,2020142,'Barbeque Nation','Kitkat Shake', 200)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020187001,2020187,'Spicy Route','Chilly Garlic Noodles', 250)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020187002,2020187,'Spicy Route','Paneer Manchurian', 250)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020187003,2020187,'Spicy Route','Spicy Chicken Burger', 200)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020187004,2020187,'Spicy Route','Mango Shake', 150)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020187005,2020187,'Spicy Route','Gravy fried Momos', 120)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020491001,2020491,'The Yum Yum Tree','Chicken Masala', 549)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020491002,2020491,'The Yum Yum Tree','Chicken Roll', 149)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020491003,2020491,'The Yum Yum Tree','Rara Chicken', 549)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020491004,2020491,'The Yum Yum Tree','Tandoori Roti', 60)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020491005,2020491,'The Yum Yum Tree','Butter Naan', 80)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020555001,2020555,'Travertino','Paneer Butter Masala', 349)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020555002,2020555,'Travertino','Paneer Pasanda', 349)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020555003,2020555,'Travertino','Mashroom Masala', 300)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020555004,2020555,'Travertino','Dum Aloo', 250)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020555005,2020555,'Travertino','Butter Naan', 70)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020764001,2020764,'Motil Mahal Delux','Stuffed Paratha', 120)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020764002,2020764,'Motil Mahal Delux','Chole Bhatoore', 180)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020764003,2020764,'Motil Mahal Delux','Chole Kulche', 180)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020764004,2020764,'Motil Mahal Delux','Lassi', 100)''')
          self.c.execute('''INSERT INTO Menu (MenuId, RestId, ResturantName, FoodName, Price) VALUES (2020764005,2020764,'Motil Mahal Delux','Raj-Khachodi', 80)''')
          self.conn.commit()

#Authentication of the user of the finding
class Authentication():
    def __init__(self,argument):
      if argument == 1:
          self.signup()
          self.login()
      else:
          self.login()

    #signup module for the new user
    def signup(self):
      conn = sqlite3.connect('FoodOrdering.db')
      c= conn.cursor()
      name = input("Dear Customer, Please Tell Us Your name : ")
      email= input("Please enter the email address : ")
      password= input("Create your password : ")
      contactNo= input("Please enter your Contact Number : ")
      userAddress= input("Please enter the residential Address : ")
      #entering user details in the database
      conn = sqlite3.connect('FoodOrdering.db')
      c= conn.cursor()
      c.execute('''INSERT INTO User (Name, Email, Password, ContactNo, UserAddress) VALUES (?,?,?,?,?)''',(name,email,password,contactNo,userAddress))
      conn.commit()
    
    #Login module for existing user
    def login(self):
      print("Welcome, You need to Login now")
      contactNo=input("Enter your Phone number")
      password=input("Enter your Password")
      #checking if the user exists or not
      conn = sqlite3.connect('FoodOrdering.db')
      c = conn.cursor()
      c.execute('SELECT * from User WHERE contactNo="%s" AND Password="%s"' % (contactNo,password))
      if c.fetchone() is not None:
          print ("Welcome")
      else:
          print ("Login failed")

class Wishlist():

  def __init__(self):
    pass

  #viewing the menu and the resturants
  def view(self):
    conn = sqlite3.connect('FoodOrdering.db')
    c=conn.cursor()
    c.execute('SELECT * from Menu')
    dishes = c.fetchall()
    foods=pd.DataFrame(dishes,columns=['MenuId', 'RestId', 'ResturantName', 'FoodName', 'Price'])
    print(foods)
    DIS = self.estimatedTime()
    print('Estimated time of delivery to your doorstep from different resturants')
    print(DIS)
  
  # finding the distance from user to resturant and hence the time 
  def estimatedTime(self):
    DisplayTime = pd.DataFrame(columns=['resturantName','EstimatedTime(Mins)'])
    Userloc=(22.4,78.4)
    conn = sqlite3.connect('FoodOrdering.db')
    c=conn.cursor()
    c.execute('SELECT * FROM Resturant')
    resturants= c.fetchall()
    for row in resturants:
      restName= row[1]
      restLat= row[3]
      restLong=row[4]
      loc2=(restLat,restLong)
      distance= hs.haversine(Userloc,loc2)
      estimateTime= distance*1.5
      new_row = {'resturantName': restName, 'EstimatedTime(Mins)':estimateTime}
      DisplayTime= DisplayTime.append(new_row, ignore_index=True)
    return DisplayTime
  
  #making the wishlist
  def wishlist(self):
    conn = sqlite3.connect('FoodOrdering.db')
    c = conn.cursor()
    #adding the items to the wishlist
    print('Enter 0 when you want to stop adding items to wishlist')
    var=1
    while var==1:
      menuid=int(input("Enter the menuID: "))
      if menuid !=0:
        c.execute('SELECT * from Menu WHERE MenuId=%d' %menuid)
        SelectedOrder= c.fetchone()
        ResturantName= SelectedOrder[2]
        DishName= SelectedOrder[3]
        Price=SelectedOrder[4]
        c.execute('INSERT INTO Wishlist (ResturantName, DishName, Price) VALUES (?,?,?)',(ResturantName, DishName,Price))
      else:
        var=2
        c.execute('SELECT * FROM Wishlist ')
        wish = c.fetchall()
        table = pd.DataFrame(wish,columns=['Serial','ResturantName', 'DishName', 'Price'])
        print(table)
        print("Thank you! Visit Again...")

#all the operations related to Cart
class Cart():
    def __init__(self):
      pass
   
    def viewResturants(self):
      conn = sqlite3.connect('FoodOrdering.db')
      c=conn.cursor()
      c.execute('SELECT * from Menu')
      dishes = c.fetchall()
      foods=pd.DataFrame(dishes,columns=['MenuId', 'RestId', 'ResturantName', 'FoodName', 'Price'])
      print(foods)

    #viewing the cart
    def viewCart(self):
        DisplayCart = pd.DataFrame(columns=['Resturant Name','Dish Name','Quantity','Price'])
        conn = sqlite3.connect('FoodOrdering.db')
        c=conn.cursor()
        c.execute('SELECT * FROM Cart')
        CartedItems= c.fetchall()
        for row in CartedItems:
          ResturantName= row[1]
          DishName= row[2]
          Quantity= row[3]
          Price= row[4]
          new_row = {'Resturant Name': ResturantName,'Dish Name': DishName,'Quantity': Quantity,'Price':Price}
          DisplayCart= DisplayCart.append(new_row, ignore_index=True)
        print(DisplayCart)

    #adding items to cart
    def addToCart(self,restID):
        conn = sqlite3.connect('FoodOrdering.db')
        c = conn.cursor()
        c.execute('SELECT * FROM Menu WHERE RestId = %d' %restID)
        SelectedResturant= c.fetchall()
        DisplayMenu = pd.DataFrame(columns=['MenuId','ResturentName','FoodName','Price'])
        for row in SelectedResturant:
          MenuID= row[0]
          ResturantName=row[2]
          DishName= row[3]
          Price= row[4]
          new_row = {'MenuId':MenuID,'ResturentName':ResturantName,'FoodName':DishName,'Price':Price}
          DisplayMenu= DisplayMenu.append(new_row, ignore_index=True)
        print(DisplayMenu)
        print("enter 0 when you finish selecting items")
        var=1
        while var==1:
          menuid=int(input("Enter the menuID: "))
          if menuid !=0:
            quantity= int(input("Enter the number of plates"))
            c.execute('SELECT * from Menu WHERE MenuId=%d' %menuid)
            SelectedOrder= c.fetchone()
            ResturantName= SelectedOrder[2]
            DishName= SelectedOrder[3]
            Price=SelectedOrder[4]
            c.execute('INSERT INTO Cart (ResturantName, DishName, Quantity, Price) VALUES (?,?,?,?)',(ResturantName, DishName, quantity, Price))
          else:
            var=2
        conn.commit()
        self.viewCart()

    #delete items from cart
    def deleteFromCart(self):
        conn = sqlite3.connect('FoodOrdering.db')
        c = conn.cursor()
        c.execute('SELECT * from Cart')
        all = c.fetchall()
        print("Do you want to delete any item?")
        print("press 1 if Yes")
        print('press 2 if No')
        i=int(input('Enter value: '))
        if (i==1):
          var=1
          while(var==1):
            DisplayCart = pd.DataFrame(columns=['DISH_ID','Dish Name','Quantity','Price'])
            CartedItems= all
            for row in CartedItems:
              DISH_ID= row[0]
              DishName= row[2]
              Quantity= row[3]
              Price= row[4]
              new_row = {'DISH_ID': DISH_ID,'Dish Name': DishName,'Quantity': Quantity,'Price':Price}
              DisplayCart= DisplayCart.append(new_row, ignore_index=True)
            print(DisplayCart)
            print('Enter the DISH_ID from the table shown for deleting the particular item.')
            X=int(input('Enter DISH_ID: '))
            c= conn.cursor()
            c.execute('DELETE from Cart WHERE UserId=%d' %X)
            conn.commit()
            print('The dish has been deleted.')
            print()
            print('Do You wish to delete any more item?')
            print('press 1 for yes')
            print('press 2 for No')
            p=int(input('Enter no: '))
            if(p==2):
              var=2

    #discard the existing cart
    def discard(self):
          conn = sqlite3.connect('FoodOrdering.db')
          c=conn.cursor()
          c.execute('SELECT * from Cart')
          all = c.fetchall()
          print("Do you want to Discard?")
          print("press 1 if Yes")
          print('press 2 if No')
          i=int(input('Enter value: '))
          if (i==1):
              c.execute('DELETE from Cart ')
              conn.commit()
          print('All the items has been deleted from the cart')

    #proceed with the current card, towards payment
    def confirm(self):
         print("Your order is placed, Proceed for payment")

#module for Placing the new order
class Order(Cart):
    def __init__(self, restID):
      Cart.__init__(self)
      self.restID= restID

     #viewing the menu and the resturants
    def viewResturants(self):
      conn = sqlite3.connect('FoodOrdering.db')
      c=conn.cursor()
      c.execute('SELECT * from Menu')
      dishes = c.fetchall()
      foods=pd.DataFrame(dishes,columns=['MenuId', 'RestId', 'ResturantName', 'FoodName', 'Price'])
      print(foods)
      DIS = self.estimatedTime()
      print('Estimated time of delivery to your doorstep from different resturants')
      print(DIS)
  
      # finding the distance from user to resturant and hence the time 
    def estimatedTime(self):
        DisplayTime = pd.DataFrame(columns=['resturantName','EstimatedTime(Mins)'])
        Userloc=(22.4,78.4)
        conn = sqlite3.connect('FoodOrdering.db')
        c=conn.cursor()
        c.execute('SELECT * FROM Resturant')
        resturants= c.fetchall()
        for row in resturants:
          restName= row[1]
          restLat= row[3]
          restLong=row[4]
          loc2=(restLat,restLong)
          distance= hs.haversine(Userloc,loc2)
          estimateTime= distance*1.5
          new_row = {'resturantName': restName, 'EstimatedTime(Mins)':estimateTime}
          DisplayTime= DisplayTime.append(new_row, ignore_index=True)
        return DisplayTime

    def start_ordering(self):
      self.viewResturants()
      conn = sqlite3.connect('FoodOrdering.db')
      c = conn.cursor()
      c.execute('SELECT * FROM Menu WHERE RestId = %d' %self.restID)
      SelectedResturant= c.fetchall()
      DisplayMenu = pd.DataFrame(columns=['MenuId','ResturentName','FoodName','Price'])
      for row in SelectedResturant:
        MenuID= row[0]
        ResturantName=row[2]
        DishName= row[3]
        Price= row[4]
        new_row = {'MenuId':MenuID,'ResturentName':ResturantName,'FoodName':DishName,'Price':Price}
        DisplayMenu= DisplayMenu.append(new_row, ignore_index=True)
      print(DisplayMenu)
      print("enter 0 when you finish selecting items")
      var=1
      while var==1:
        menuid=int(input("Enter the menuID: "))
        if menuid !=0:
          quantity= int(input("Enter the number of plates"))
          c.execute('SELECT * from Menu WHERE MenuId=%d' %menuid)
          SelectedOrder= c.fetchone()
          ResturantName= SelectedOrder[2]
          DishName= SelectedOrder[3]
          Price=SelectedOrder[4]
          c.execute('INSERT INTO Cart (ResturantName, DishName, Quantity, Price) VALUES (?,?,?,?)',(ResturantName, DishName, quantity, Price))
        else:
          var=2
      
      conn.commit()
      self.viewCart()
      var=1
      
      #while var==1:
      print('Press 1 to add items in cart')
      print('Press 2 to delete items from cart')
      print('Press 3 to discard the cart')
      print('Press 4 to confirm')
      choice= int(input("Enter the choice"))
      if choice==1:
        self.addToCart(self.restID)
        self.confirm()
      elif choice==2:
        self.deleteFromCart()
        self.confirm()
      elif choice==3:
        self.discard()
        self.confirm()
      elif choice==4:
        self.confirm()
        var=2
      else:
        print('Invalid Choice')

  #for viewing the menu
      def view(self):
        c=conn.cursor()
        c.execute('SELECT * from Menu')
        dishes = c.fetchall()
        foods=pd.DataFrame(dishes,columns=['MenuId', 'RestId', 'ResturantName', 'FoodName', 'Price'])
        print(foods)
        DIS=estimatedTime()
        print('Estimated time of delivery to your doorstep from different resturants')
        print(DIS)

class Calculate():
    def __init__(self):
      self.sum =0 
    #without any coupon the bill amount calc
    def normal_sum(self,P):
        for row in P:
          self.sum = self.sum + (row[3]*row[4]) 
        return self.sum

    #min order of the bill
    def min_order(self,sum):
      if sum < 200:
        return False
      else:
        return True
        
  #adding delivery charges
    def delivery_charges(self,restID):
        Userloc=(22.4,78.4)
        conn = sqlite3.connect('FoodOrdering.db')
        c=conn.cursor()
        c.execute('SELECT * FROM Resturant WHERE RestId = %d' %restID)
        resturant= c.fetchone()
        restLat= resturant[3]
        restLong= resturant[4]
        loc2=(restLat,restLong)
        distance= hs.haversine(Userloc,loc2)
        delivery= 20+ distance*2
        return delivery

    #adding coupon to your bill 
    def coupons(self,sum):
      print('Do you want to add any coupon?')
      print('press 1 for Yes')
      print('press 2 for No')
      i= int(input('Enter no:'))
      
      if i==1:
          print('which offer do you want to add on this order?')
          print('press 1 for SAVE50')
          print('press 2 for SAVE20')
          print('press 3 for no coupon')
          p=int(input('Enter the input: '))
          if (p==1):
              sum = sum*0.5
          elif p==2:
              sum = sum*0.2
      else:
         sum=0
      return sum

class Payment_method():

    def __init__(self):
      pass

    #for debit/credit card payment method
    def debit(self): 
      card=int(input('Enter your card number: ')) 
      name=input('Enter the name on the card')
      expiry= input('Enter the expiry date:') 
      cvv= int(input('Enter the cvv')) 
      print('Enter 1 for submit') 
      print('Enter 2 for cancel')
      Inp=int(input('Enter the digit')) 
      x= self.Submit(Inp)
  
    #for upi payment method
    def upi(self):
      ID=input('Enter the Upi ID')
      OTP=input('Enter OTP from your registered contact number')
      print('Enter 1 for submit')
      print('Enter 2 for cancel')
      Inp=int(input('Enter the digit'))
      x = self.Submit(Inp)

    #for netbanking as a payment method
    def net_banking(self):
      Acc_number=int(input('Enter the acc number:'))
      Net_banking=int(input('Enter the net banking Id'))
      otp=input('Enter the OTP from your registered contact number')
      print('Enter 1 for submit')
      print('Enter 2 for cancel')
      Inp=int(input('Enter the digit'))
      x = self.Submit(Inp)

    #for submit the payment
    def Submit(self,x):
      if(x==1):
          print('You have placed the order by submitting the required amount ')
      elif(x==2):
          print("You have cancelled the order")
      else:
          print('wrong entry')
          return 0

class Payment(Calculate, Payment_method):

  def __init__(self, restID):
    Calculate.__init__(self)
    Payment_method.__init__(self)
    self.restID = restID

  def start_payment(self):
    conn = sqlite3.connect('FoodOrdering.db')
    c=conn.cursor()
    c.execute('SELECT * FROM Cart')
    P = c.fetchall()
    sum = self.normal_sum(P)
    if self.min_order(sum) == False:
      print("Your order sums less than minimum amount i.e 200.")
    else : 
      delivery= self.delivery_charges(self.restID)
      discount= self.coupons(sum)
      Total= sum - discount + delivery
      print('Your sum amounts to', Total)
      print('Choose 1 for Debit/Credit card method')
      print('Choose 2 for UPI method')
      print('Choose 3 for Net banking method')
      x=int(input('Enter the digit for choosing the convenient method of payment'))
      if(x==1):
            self.debit()
      elif(x==2):
            self.upi()
      elif(x==3):
            self.net_banking()
      else:
            print('wrong entry')
            return 0

#estimation of the time to deliver
class Timings():
  def __init__(self):
    pass
  def timing(self):
    conn = sqlite3.connect('FoodOrdering.db')
    c=conn.cursor()
    c.execute('Select * from Cart')
    p=c.fetchone()
    restName= p[1]
    print(restName)
    now = datetime.datetime.now()
    print(now)
    p=now.strftime("%H:%M:%S")
    DIS=self.estimatedTime()
    for i in range(0,5):
      if(DIS.iloc[i,0]==restName):
        break;
    D=DIS.iloc[i,1]
    M=(int(p[3:5])+int(D))%60
    H=int(p[0:2])+int((int(p[3:5])+int(D))/60)
    Mnew= (int(p[3:5])+int(D*1.1))%60
    Hnew= int(p[0:2])+int((int(p[3:5])+int(D*1.1))/60)
    return Hnew,Mnew

    
  #estimate the time for the order tracking
  def estimatedTime(self):
    conn = sqlite3.connect('FoodOrdering.db')
    c=conn.cursor()
    DisplayTime = pd.DataFrame(columns=['resturantName','EstimatedTime(Mins)'])
    Userloc=(22.4,78.4)
    c.execute('SELECT * FROM Resturant')
    resturants= c.fetchall()
    for row in resturants:
      restName= row[1]
      restLat= row[3]
      restLong=row[4]
      loc2=(restLat,restLong)
      distance= hs.haversine(Userloc,loc2)
      estimateTime= distance*1.5
      new_row = {'resturantName': restName, 'EstimatedTime(Mins)':estimateTime}
      DisplayTime= DisplayTime.append(new_row, ignore_index=True)
    return DisplayTime

#module for tracking the order
class Track():
  def __init__(self,Hnew,Mnew):
    self.Hnew=Hnew
    self.Mnew=Mnew
    self.track()

  def track(self):
    print('Estimated time in HH:MM is ',end=' ')
    print(self.Hnew,':',self.Mnew)
    now = datetime.datetime.now()
    p=now.strftime("%H:%M:%S")
    M=(int(p[3:5]))%60
    H=int(p[0:2])
    if (self.Hnew<H and self.Mnew<M):
      print('Sorry we are not able to deliver in time. Do you want to cancel?')
      print('1|Yes')
      print('2|No')
      l=int(input('Enter choice:'))
      if l==1:
        print('Order cancelled')
        exit()
      elif l==2:
        print('tahnks for patience. will reach you soon')
    else:
      print('Is your order delivered?')
      print('1: Delivered')
      print('2: not delivered')
      print('3: Call Customer Support')
      choice=int(input('Enter your choice'))
      if choice== 2:
          print('There is still time in delivery, please wait')
          print('Do u want to track again?')
          print('1:yes')
          print('2:no')
          i=int(input('enter value:'))
          if(i==1):
            self.track()
      elif choice==1:
          self.rateUs()
      elif choice==3:
          print('For customer Support Call on 8750331566')
      else:
          print('Wrong Choice dear')
  

  #rate us 
  def rateUs(self):
    print('Do you want to rate us')
    print('press 1 for yes ')
    print('press 2 for no')
    i=int(input('Enter no:'))
    if(i==1):
            print('rate us by pressing any digit from 0 to 5')
            x=int(input('Give rating: '))
    print('Thanks for you precious time.')
    print('We will meet soon')

#main call
def main():
    db = createDataBase()
    db.database()
    db.createTable()
    rest = CreateMenu()
    rest.createResturant()
    rest.createDishes()
    print("1| New User")
    print("2| Existing User")
    argument= int(input("Are you a new user or existing user, choose 1 or 2?"))
    authenticate = Authentication(argument)
    print("1| You just want to explore?")
    print("2| You want to order Something?")
    argument=int(input("Choose 1 or 2"))
    if(argument==1):
      wish = Wishlist()
      wish.view()
      wish.wishlist()
    else:
      order = Order(1)
      order.viewResturants()
      restID = int(input("You can choose one resturant ID to order"))
      order = Order(restID)1
      order.start_ordering()
      pay = Payment(restID)
      x = pay.start_payment()
      time=Timings()
      Hnew, Mnew= time.timing()
      track=Track(Hnew, Mnew)
  
  
if __name__ == "__main__":
    main()